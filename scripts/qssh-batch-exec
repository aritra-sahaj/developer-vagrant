#!/bin/bash

set -Eeuo pipefail

source "$( dirname ${BASH_SOURCE[0]} )/qssh-generic-functions"
source "$( dirname ${BASH_SOURCE[0]} )/qssh-override-functions"

ALL_INSTANCES_DETAILS=$(aws ec2 describe-instances | jq -c '.Reservations | {instances: map(.Instances) | add} | .instances |=map({id: .InstanceId, key: .KeyName, name: .Tags[] | select(.Key=="Name") | .Value, private_ip: .NetworkInterfaces[0].PrivateIpAddress, public_ip: .NetworkInterfaces[0].Association.PublicIp}) | .instances |=sort_by(.name) | .instances')

function capture_batch_command() {
  local -n batch_command=${1}
  echo ""
  read -p "Enter command to be executed on targets: " batch_command
}

function capture_user_for_all_instance() {
  local -n pre_chosen_user_name=${1}
  local default_pre_chosen_user_name=${2}
  echo ""
  read -p "User to be used for all instances (${default_pre_chosen_user_name}): " pre_chosen_user_name
  pre_chosen_user_name=${pre_chosen_user_name:-${default_pre_chosen_user_name}}
}

function get_instance_details() {
  local -n instance_ip=${1}
  local -n instance_key=${2}
  local -n instance_user=${3}
  local instance_detail="${4}"
  local ip_field=${5}
  local identifier=${6}
  local name_function=${7}
  instance_ip=$(echo -n "${instance_detail}" | jq -r ".${ip_field}")
  instance_key_pair=$(echo -n "${instance_detail}" | jq -r ".key")
  lookup_key instance_key "${instance_key_pair}" "${identifier}"
  instance_name=$(echo -n "${instance_detail}" | jq -r ".name" | sed 's|SPACE| |g')
  ${name_function} instance_user "${instance_name}"
}

function print_batch_confirmation() {
  local instances_details="${1}"

  echo ""
  echo "Execute command on below instances"
  echo ""

  for option in $(echo -n "${instances_details}" | jq -r ".[] | .name | gsub(\"[[:space:]]+\"; \"SPACE\")")
  do
    name=$(echo -n "${option}" | sed 's|SPACE| |g')
    echo " - ${name}"
  done

  local confirmation_default="y"
  echo ""
  read -p "Proceed [y/n]? (y): " -n 1 confirmation
  confirmation=$(echo -n "${confirmation:-${confirmation_default}}" | tr '[:upper:]' '[:lower:]')
  if [[ "${confirmation}" != "y" ]]; then
    exit 1
  fi
}

filter_instances_details TARGET_INSTANCES_DETAILS "${ALL_INSTANCES_DETAILS}" "${@}"
empty_check "${TARGET_INSTANCES_DETAILS}" "No target instances found"
print_batch_confirmation "${TARGET_INSTANCES_DETAILS}"

capture_batch_command BATCH_COMMAND

BATCH_COMMAND="echo \"executing [${BATCH_COMMAND}] in \$(hostname -I | awk '{print \$1}')\"; echo ''; ${BATCH_COMMAND} || true; echo ''"

use_bastion USE_BASTION TARGET_IP_FIELD

if [[ "${USE_BASTION}" == "y" ]]; then
  filter_instances_details BASTION_INSTANCES_DETAILS "${ALL_INSTANCES_DETAILS}" "bastion"
  empty_check "${BASTION_INSTANCES_DETAILS}" "No bastion instances found"
  select_and_get_instance_details BASTION_IP BASTION_KEY BASTION_USER "${BASTION_INSTANCES_DETAILS}" "public_ip" \
    "Choose a bastion instance to ssh through." "Bastion Instance: " "bastion" "bastion_user"
fi

capture_user_for_all_instance PRE_CHOSEN_USER_NAME "ubuntu"

function pre_chosen_instance_user() {
  local -n user_name=${1}
  user_name=${user_name:-${PRE_CHOSEN_USER_NAME}}
}

for INSTANCE_DETAIL in $(echo -n "${TARGET_INSTANCES_DETAILS}" | jq -c '.[]' | sed 's| |SPACE|g'); do
  get_instance_details TARGET_IP TARGET_KEY TARGET_USER "${INSTANCE_DETAIL}" "${TARGET_IP_FIELD}" "target" "pre_chosen_instance_user"
  if [[ "${USE_BASTION}" == "y" ]]; then
    echo ""
    ssh -q -o StrictHostKeyChecking=no \
      -o ProxyCommand="ssh -q -o StrictHostKeyChecking=no -i ${BASTION_KEY} ${BASTION_USER}@${BASTION_IP} -W %h:%p" \
      -i ${TARGET_KEY} ${TARGET_USER}@${TARGET_IP} ${BATCH_COMMAND}
  else
    echo ""
    ssh -q -o StrictHostKeyChecking=no -i ${TARGET_KEY} ${TARGET_USER}@${TARGET_IP} ${BATCH_COMMAND}
  fi
done